1) Отображения и мультиоотбражения автоматически упорядочивают свои элементы по ключам, что обеспечивает быстродействие при поиске элементво по заданному ключу.Множества и мультимножества автоматически отсортированны по значению. Реализаций на основе бинарного дерева.
2) Хэш-функция должна быть детерминирована, ее скорость не зависит от количества элементов в зэш-таблицу, она равномерна.
3) Коллизии возникают из-за недостаточно хорошо детерменированной или равномерной хэш-функции. Решаются либо рехэшерованием, которое включает добавление новых слотов и пересчет хэшей.
4) Т.к. если хэш-функция достаточно "хороша", то любая операция выполянется за константное время, т.к. элемент лежит в слоте, приписанном конкретному хэшу. Если существуют коллизии, то в данном слоте "лежит" некоторый список из элементов.
5) Boost.multiindex позволяет пользоваться плюсами различных интерфейсов над определенным набором данных.
6) Хэш-функция для чисел с плавающей точкой. Пусть точность чисел в системе фиксированна. Выберу базу result = 31. Далее выделю некоторую цифру из числа с плавающуй точко (пусть это x). Теперь result = result * 17 + x. Для равных чисел такая функция будет давать равные хэши, то есть она детерминирована. Считается быстро, тк использованы операция сложения и умножения. Коллизий не очень много, в силу умножению результат каждый раз на 17, что увеличивает разброс, но не сильно услодняет вычисления.
